387. 字符串中的第一个唯一字符
int firstUniqChar(char * s){
    int a[26] = {0};
    int len = strlen(s);
    int i;
    for (i = 0; i < len; i++)
        a[s[i] - 'a']++;
    for (i = 0; i < len; i++) {
        if (a[s[i] - 'a'] == 1)
            return i;
    }
    return -1;
}


151. 翻转字符串里的单词
char * reverseWords(char * s){
    int len = strlen(s);
    if(len == 0)
        return s;
    char *res = (char *)malloc(sizeof(char) * (strlen(s) + 2));
    char *stack = (char *)malloc(sizeof(char) * (strlen(s) + 2));
    int i, t = 0, count = 0, flag = 0;
    for(i = len - 1;i >= 0;i--)
    {
        if(s[i] != ' ')
        {
            stack[t++] = s[i];
            flag = 1;
        }
        if(s[i] == ' ')
        {
            while(t > 0)
                res[count++] = stack[--t];
            if(flag == 1)
                res[count++] = ' ';
            flag = 0;
        }
    }
    if(t == 0)
    {
        if(count > 0)
            count--;
    }
    while(t > 0)
        res[count++] = stack[--t];
    res[count] = '\0';
    return res;
}


917. 仅仅反转字母
char *reverseOnlyLetters(char *s)
{
    if (s == NULL) {
        return NULL;
    }
    int len = strlen(s);
    char *a = (char*)malloc(sizeof(char) * (len + 1));
    memcpy(a, s, sizeof(char) * (len + 1));
    int i = 0, j = len - 1; // 首尾指针 
    while(i < j) { // 双指针往中间移动 
        while (i < j && !isalpha(a[i])) {
            i++;
        } 
        while (i < j && !isalpha(a[j])) {
            j--;
        } 
        if (i < j ) {
            char t = a[i];
            a[i] = a[j];
            a[j] = t;
            i++, j--;
        }
    }
    return a;
}

8. 字符串转换整数 (atoi)
int myAtoi(char* str) {
    long ret = 0;
    int flag = 1;//默认正数
    //去除空格及判断符号位
    for (; *str == 32; str++);
    switch (*str) {
    case 45:
        flag = -1;
    case 43:
        str++;
    }
    //排除非数字的情况
    if (*str < 48 || *str>57) return 0;
    
    while (*str >= 48 && *str <= 57) {
        ret = ret * 10 + (*str - 48);
        //判断溢出
        if ((int)ret != ret) {
            return (flag == 1) ? (INT_MAX) : (INT_MIN);
        }
        str++;
    }
    ret *= flag;
    return (int)ret;
}


