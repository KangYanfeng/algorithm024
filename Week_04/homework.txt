200. 岛屿数量
C：
void dfs(char** grid, int gridSize, int gridColSize, int i, int j) {
    if(grid[i][j] != '1') {
        return;
    }
    grid[i][j] = '2';
    if(i > 0) {
        dfs(grid, gridSize, gridColSize, i - 1, j);
    }
    if(i < gridSize - 1) {
        dfs(grid, gridSize, gridColSize, i + 1, j);
    }
    if(j > 0) {
        dfs(grid, gridSize, gridColSize, i, j - 1);
    }
    if(j < gridColSize - 1) {
        dfs(grid, gridSize, gridColSize, i, j + 1);
    }
}

int numIslands(char** grid, int gridSize, int* gridColSize){
    int num = 0;
    int i, j;
    for(i = 0; i < gridSize; i++) {
        for(j = 0; j < gridColSize[0]; j++) {
            if(grid[i][j] == '1') {
                num++;
                dfs(grid, gridSize, gridColSize[i], i, j);
            }
        }
    }   
    return num;
}

Python：
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        row = len(grid)
        col = len(grid[0])
        cnt = 0

        def dfs(i, j):
            grid[i][j] = "0"
            for x, y in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
                tmp_i = i + x
                tmp_j = j + y
                if 0 <= tmp_i < row and 0 <= tmp_j < col and grid[tmp_i][tmp_j] == "1":
                    dfs(tmp_i, tmp_j)

        for i in range(row):
            for j in range(col):
                if grid[i][j] == "1":
                    dfs(i, j)
                    cnt += 1
        return cnt

860. 柠檬水找零
C
bool lemonadeChange(int* bills, int billsSize) {
    int five = 0, ten = 0;
    for (int i = 0; i < billsSize; i++) {
        if (bills[i] == 5) {
            five++;
        } else if (bills[i] == 10) {
            if (five == 0) {
                return false;
            }
            five--;
            ten++;
        } else {
            if (five > 0 && ten > 0) {
                five--;
                ten--;
            } else if (five >= 3) {
                five -= 3;
            } else {
                return false;
            }
        }
    }
    return true;
}

//python
class Solution(object):
    def lemonadeChange(self, bills):
        """
        :type bills: List[int]
        :rtype: bool
        """
        five = ten = 0
        for i in bills:
            if i == 5: five += 1
            elif i == 10: five, ten = five - 1, ten + 1
            elif ten > 0: five, ten = five - 1, ten - 1
            else: five -= 3
            if five < 0: return False
        return True

33. 搜索旋转排序数组

Python
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] == target:
                return mid
            if nums[0] <= nums[mid]:
                if nums[0] <= target < nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
            else:
                if nums[mid] < target <= nums[len(nums) - 1]:
                    l = mid + 1
                else:
                    r = mid - 1
        return -1

  
C：
int search(int* nums, int numsSize, int target){
    int left = 0, right = numsSize - 1, mid;
    while (left <= right) {
        mid = left + (right - left) / 2;  // 防止溢出
        if (nums[mid] == target) return mid;
        if (nums[left] <= nums[mid]) {  // 等于处理单个不存在情况
            if (target < nums[mid] && target >= nums[left]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else {
            if (target > nums[mid] && nums[right] >= target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }
    return -1;
}

