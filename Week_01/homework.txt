1、题目26. 删除排序数组中的重复项
//双指针实现
int removeDuplicates(int* nums, int numsSize){
    int slow=0; 
    if(numsSize==0)
        return 0;
    for(int fast=1;fast<numsSize;fast++){  
        if(nums[fast]!=nums[slow]){ 
            nums[++slow]=nums[fast];
        }
    }
    return slow+1;

}
2、题目189. 旋转数组
//数组3次翻转
void swap(int* a, int* b) {
    int t = *a;
    *a = *b, *b = t;
}

void reverse(int* nums, int start, int end) {
    while (start < end) {
        swap(&nums[start], &nums[end]);
        start += 1;
        end -= 1;
    }
}

void rotate(int* nums, int numsSize, int k) {
    k %= numsSize;
    reverse(nums, 0, numsSize - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, numsSize - 1);
}
3、题目88. 合并两个有序数组
//双指针，从后往前
void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){
    int len1 = m - 1;
    int len2 = n - 1;
    int len = m + n - 1;
    while(len1 >= 0 && len2 >= 0) {
        nums1[len--] = nums1[len1] > nums2[len2] ? nums1[len1--] : nums2[len2--];
        }
        memcpy(nums1,nums2,(len2 + 1)*sizeof(int));
}
4、题目283. 移动零
//双指针实现
void moveZeroes(int* nums, int numsSize){
    for(int i=0,j=0;j<numsSize;j++)
        {
            if(nums[j]!=0)
                {
                    int tem = nums[j];
                    nums[j] = nums[i];
                    nums[i++] = tem;
                }
        }
}
5、题目1. 两数之和
//暂用暴力法
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
for (int i = 0; i < numsSize; ++i) {
        for (int j = i + 1; j < numsSize; ++j) {
            if (nums[i] + nums[j] == target) {
                int* ret = malloc(sizeof(int) * 2);
                ret[0] = i, ret[1] = j;
                *returnSize = 2;
                return ret;
            }
        }
    }
    *returnSize = 0;
    return NULL;

}